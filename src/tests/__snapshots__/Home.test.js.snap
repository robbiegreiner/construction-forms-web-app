// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Home tests should match the snapshot test 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Home />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Controls
          selectControl={[Function]}
          selectedControl=""
/>,
        <DataViz
          selectedControl=""
/>,
        undefined,
      ],
      "className": "main-container",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "selectControl": [Function],
          "selectedControl": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "selectedControl": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      undefined,
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Controls
            selectControl={[Function]}
            selectedControl=""
/>,
          <DataViz
            selectedControl=""
/>,
          undefined,
        ],
        "className": "main-container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "selectControl": [Function],
            "selectedControl": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "selectedControl": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        undefined,
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`Home tests should render a form to add a new employee 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Home />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Controls
          selectControl={[Function]}
          selectedControl="Add Employee"
/>,
        <DataViz
          selectedControl="Add Employee"
/>,
        <div
          className="add-popup"
>
          <form
                    className="popup-form"
                    onSubmit={[Function]}
          >
                    <button
                              className="close-popup"
                              onClick={[Function]}
                    >
                              X
                    </button>
                    <h4>
                              Add New Employee
                    </h4>
                    <label
                              htmlFor="employee-name"
                    >
                              Name:
                              <input
                                        className="employee_name"
                                        onChange={[Function]}
                                        placeholder="Name"
                                        type="text"
                              />
                    </label>
                    <label
                              htmlFor="employee-position"
                    >
                              Position:
                              <input
                                        className="employee_position"
                                        onChange={[Function]}
                                        placeholder="Position"
                                        type="text"
                              />
                    </label>
                    <label
                              htmlFor="employee-email"
                    >
                              Email:
                              <input
                                        className="employee_email"
                                        onChange={[Function]}
                                        placeholder="Email"
                                        type="email"
                              />
                    </label>
                    <label
                              htmlFor="employee-phone"
                    >
                              Phone:
                              <input
                                        className="employee_phone"
                                        onChange={[Function]}
                                        placeholder="Phone"
                                        type="text"
                              />
                    </label>
                    <input
                              type="submit"
                              value="Submit"
                    />
          </form>
</div>,
      ],
      "className": "main-container",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "selectControl": [Function],
          "selectedControl": "Add Employee",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "selectedControl": "Add Employee",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <form
            className="popup-form"
            onSubmit={[Function]}
>
            <button
                        className="close-popup"
                        onClick={[Function]}
            >
                        X
            </button>
            <h4>
                        Add New Employee
            </h4>
            <label
                        htmlFor="employee-name"
            >
                        Name:
                        <input
                                    className="employee_name"
                                    onChange={[Function]}
                                    placeholder="Name"
                                    type="text"
                        />
            </label>
            <label
                        htmlFor="employee-position"
            >
                        Position:
                        <input
                                    className="employee_position"
                                    onChange={[Function]}
                                    placeholder="Position"
                                    type="text"
                        />
            </label>
            <label
                        htmlFor="employee-email"
            >
                        Email:
                        <input
                                    className="employee_email"
                                    onChange={[Function]}
                                    placeholder="Email"
                                    type="email"
                        />
            </label>
            <label
                        htmlFor="employee-phone"
            >
                        Phone:
                        <input
                                    className="employee_phone"
                                    onChange={[Function]}
                                    placeholder="Phone"
                                    type="text"
                        />
            </label>
            <input
                        type="submit"
                        value="Submit"
            />
</form>,
          "className": "add-popup",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <button
                className="close-popup"
                onClick={[Function]}
>
                X
</button>,
              <h4>
                Add New Employee
</h4>,
              <label
                htmlFor="employee-name"
>
                Name:
                <input
                                className="employee_name"
                                onChange={[Function]}
                                placeholder="Name"
                                type="text"
                />
</label>,
              <label
                htmlFor="employee-position"
>
                Position:
                <input
                                className="employee_position"
                                onChange={[Function]}
                                placeholder="Position"
                                type="text"
                />
</label>,
              <label
                htmlFor="employee-email"
>
                Email:
                <input
                                className="employee_email"
                                onChange={[Function]}
                                placeholder="Email"
                                type="email"
                />
</label>,
              <label
                htmlFor="employee-phone"
>
                Phone:
                <input
                                className="employee_phone"
                                onChange={[Function]}
                                placeholder="Phone"
                                type="text"
                />
</label>,
              <input
                type="submit"
                value="Submit"
/>,
            ],
            "className": "popup-form",
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "X",
                "className": "close-popup",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "X",
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Add New Employee",
              },
              "ref": null,
              "rendered": "Add New Employee",
              "type": "h4",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Name:",
                  <input
                    className="employee_name"
                    onChange={[Function]}
                    placeholder="Name"
                    type="text"
/>,
                ],
                "htmlFor": "employee-name",
              },
              "ref": null,
              "rendered": Array [
                "Name:",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "employee_name",
                    "onChange": [Function],
                    "placeholder": "Name",
                    "type": "text",
                  },
                  "ref": "employee-name",
                  "rendered": null,
                  "type": "input",
                },
              ],
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Position:",
                  <input
                    className="employee_position"
                    onChange={[Function]}
                    placeholder="Position"
                    type="text"
/>,
                ],
                "htmlFor": "employee-position",
              },
              "ref": null,
              "rendered": Array [
                "Position:",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "employee_position",
                    "onChange": [Function],
                    "placeholder": "Position",
                    "type": "text",
                  },
                  "ref": "employee-position",
                  "rendered": null,
                  "type": "input",
                },
              ],
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Email:",
                  <input
                    className="employee_email"
                    onChange={[Function]}
                    placeholder="Email"
                    type="email"
/>,
                ],
                "htmlFor": "employee-email",
              },
              "ref": null,
              "rendered": Array [
                "Email:",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "employee_email",
                    "onChange": [Function],
                    "placeholder": "Email",
                    "type": "email",
                  },
                  "ref": "employee-email",
                  "rendered": null,
                  "type": "input",
                },
              ],
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Phone:",
                  <input
                    className="employee_phone"
                    onChange={[Function]}
                    placeholder="Phone"
                    type="text"
/>,
                ],
                "htmlFor": "employee-phone",
              },
              "ref": null,
              "rendered": Array [
                "Phone:",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "employee_phone",
                    "onChange": [Function],
                    "placeholder": "Phone",
                    "type": "text",
                  },
                  "ref": "employee-phone",
                  "rendered": null,
                  "type": "input",
                },
              ],
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "type": "submit",
                "value": "Submit",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
          ],
          "type": "form",
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Controls
            selectControl={[Function]}
            selectedControl="Add Employee"
/>,
          <DataViz
            selectedControl="Add Employee"
/>,
          <div
            className="add-popup"
>
            <form
                        className="popup-form"
                        onSubmit={[Function]}
            >
                        <button
                                    className="close-popup"
                                    onClick={[Function]}
                        >
                                    X
                        </button>
                        <h4>
                                    Add New Employee
                        </h4>
                        <label
                                    htmlFor="employee-name"
                        >
                                    Name:
                                    <input
                                                className="employee_name"
                                                onChange={[Function]}
                                                placeholder="Name"
                                                type="text"
                                    />
                        </label>
                        <label
                                    htmlFor="employee-position"
                        >
                                    Position:
                                    <input
                                                className="employee_position"
                                                onChange={[Function]}
                                                placeholder="Position"
                                                type="text"
                                    />
                        </label>
                        <label
                                    htmlFor="employee-email"
                        >
                                    Email:
                                    <input
                                                className="employee_email"
                                                onChange={[Function]}
                                                placeholder="Email"
                                                type="email"
                                    />
                        </label>
                        <label
                                    htmlFor="employee-phone"
                        >
                                    Phone:
                                    <input
                                                className="employee_phone"
                                                onChange={[Function]}
                                                placeholder="Phone"
                                                type="text"
                                    />
                        </label>
                        <input
                                    type="submit"
                                    value="Submit"
                        />
            </form>
</div>,
        ],
        "className": "main-container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "selectControl": [Function],
            "selectedControl": "Add Employee",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "selectedControl": "Add Employee",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <form
              className="popup-form"
              onSubmit={[Function]}
>
              <button
                            className="close-popup"
                            onClick={[Function]}
              >
                            X
              </button>
              <h4>
                            Add New Employee
              </h4>
              <label
                            htmlFor="employee-name"
              >
                            Name:
                            <input
                                          className="employee_name"
                                          onChange={[Function]}
                                          placeholder="Name"
                                          type="text"
                            />
              </label>
              <label
                            htmlFor="employee-position"
              >
                            Position:
                            <input
                                          className="employee_position"
                                          onChange={[Function]}
                                          placeholder="Position"
                                          type="text"
                            />
              </label>
              <label
                            htmlFor="employee-email"
              >
                            Email:
                            <input
                                          className="employee_email"
                                          onChange={[Function]}
                                          placeholder="Email"
                                          type="email"
                            />
              </label>
              <label
                            htmlFor="employee-phone"
              >
                            Phone:
                            <input
                                          className="employee_phone"
                                          onChange={[Function]}
                                          placeholder="Phone"
                                          type="text"
                            />
              </label>
              <input
                            type="submit"
                            value="Submit"
              />
</form>,
            "className": "add-popup",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <button
                  className="close-popup"
                  onClick={[Function]}
>
                  X
</button>,
                <h4>
                  Add New Employee
</h4>,
                <label
                  htmlFor="employee-name"
>
                  Name:
                  <input
                                    className="employee_name"
                                    onChange={[Function]}
                                    placeholder="Name"
                                    type="text"
                  />
</label>,
                <label
                  htmlFor="employee-position"
>
                  Position:
                  <input
                                    className="employee_position"
                                    onChange={[Function]}
                                    placeholder="Position"
                                    type="text"
                  />
</label>,
                <label
                  htmlFor="employee-email"
>
                  Email:
                  <input
                                    className="employee_email"
                                    onChange={[Function]}
                                    placeholder="Email"
                                    type="email"
                  />
</label>,
                <label
                  htmlFor="employee-phone"
>
                  Phone:
                  <input
                                    className="employee_phone"
                                    onChange={[Function]}
                                    placeholder="Phone"
                                    type="text"
                  />
</label>,
                <input
                  type="submit"
                  value="Submit"
/>,
              ],
              "className": "popup-form",
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "X",
                  "className": "close-popup",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": "X",
                "type": "button",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Add New Employee",
                },
                "ref": null,
                "rendered": "Add New Employee",
                "type": "h4",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "Name:",
                    <input
                      className="employee_name"
                      onChange={[Function]}
                      placeholder="Name"
                      type="text"
/>,
                  ],
                  "htmlFor": "employee-name",
                },
                "ref": null,
                "rendered": Array [
                  "Name:",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "employee_name",
                      "onChange": [Function],
                      "placeholder": "Name",
                      "type": "text",
                    },
                    "ref": "employee-name",
                    "rendered": null,
                    "type": "input",
                  },
                ],
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "Position:",
                    <input
                      className="employee_position"
                      onChange={[Function]}
                      placeholder="Position"
                      type="text"
/>,
                  ],
                  "htmlFor": "employee-position",
                },
                "ref": null,
                "rendered": Array [
                  "Position:",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "employee_position",
                      "onChange": [Function],
                      "placeholder": "Position",
                      "type": "text",
                    },
                    "ref": "employee-position",
                    "rendered": null,
                    "type": "input",
                  },
                ],
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "Email:",
                    <input
                      className="employee_email"
                      onChange={[Function]}
                      placeholder="Email"
                      type="email"
/>,
                  ],
                  "htmlFor": "employee-email",
                },
                "ref": null,
                "rendered": Array [
                  "Email:",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "employee_email",
                      "onChange": [Function],
                      "placeholder": "Email",
                      "type": "email",
                    },
                    "ref": "employee-email",
                    "rendered": null,
                    "type": "input",
                  },
                ],
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "Phone:",
                    <input
                      className="employee_phone"
                      onChange={[Function]}
                      placeholder="Phone"
                      type="text"
/>,
                  ],
                  "htmlFor": "employee-phone",
                },
                "ref": null,
                "rendered": Array [
                  "Phone:",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "employee_phone",
                      "onChange": [Function],
                      "placeholder": "Phone",
                      "type": "text",
                    },
                    "ref": "employee-phone",
                    "rendered": null,
                    "type": "input",
                  },
                ],
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "type": "submit",
                  "value": "Submit",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
            ],
            "type": "form",
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`Home tests should render a form to add a new project 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Home />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Controls
          selectControl={[Function]}
          selectedControl="Add Project"
/>,
        <DataViz
          selectedControl="Add Project"
/>,
        <div
          className="add-popup"
>
          <form
                    className="popup-form"
                    onSubmit={[Function]}
          >
                    <button
                              className="close-popup"
                              onClick={[Function]}
                    >
                              X
                    </button>
                    <h4>
                              Add New Project
                    </h4>
                    <label
                              htmlFor="project-name"
                    >
                              Project Name:
                              <input
                                        className="project_name"
                                        onChange={[Function]}
                                        placeholder="Project Name"
                                        type="text"
                              />
                    </label>
                    <label
                              htmlFor="project-location"
                    >
                              Location:
                              <input
                                        className="project_location"
                                        onChange={[Function]}
                                        placeholder="Location"
                                        type="text"
                              />
                    </label>
                    <label
                              htmlFor="project-union"
                    >
                              Union:
                              <select
                                        className="project_union"
                                        onChange={[Function]}
                              >
                                        <option
                                                  value="true"
                                        >
                                                  Yes
                                        </option>
                                        <option
                                                  value="false"
                                        >
                                                  No
                                        </option>
                              </select>
                    </label>
                    <label
                              htmlFor="project-public"
                    >
                              Public:
                              <select
                                        className="project_public"
                                        onChange={[Function]}
                              >
                                        <option
                                                  value="true"
                                        >
                                                  Yes
                                        </option>
                                        <option
                                                  value="false"
                                        >
                                                  No
                                        </option>
                              </select>
                    </label>
                    <input
                              type="submit"
                              value="Submit"
                    />
          </form>
</div>,
      ],
      "className": "main-container",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "selectControl": [Function],
          "selectedControl": "Add Project",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "selectedControl": "Add Project",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <form
            className="popup-form"
            onSubmit={[Function]}
>
            <button
                        className="close-popup"
                        onClick={[Function]}
            >
                        X
            </button>
            <h4>
                        Add New Project
            </h4>
            <label
                        htmlFor="project-name"
            >
                        Project Name:
                        <input
                                    className="project_name"
                                    onChange={[Function]}
                                    placeholder="Project Name"
                                    type="text"
                        />
            </label>
            <label
                        htmlFor="project-location"
            >
                        Location:
                        <input
                                    className="project_location"
                                    onChange={[Function]}
                                    placeholder="Location"
                                    type="text"
                        />
            </label>
            <label
                        htmlFor="project-union"
            >
                        Union:
                        <select
                                    className="project_union"
                                    onChange={[Function]}
                        >
                                    <option
                                                value="true"
                                    >
                                                Yes
                                    </option>
                                    <option
                                                value="false"
                                    >
                                                No
                                    </option>
                        </select>
            </label>
            <label
                        htmlFor="project-public"
            >
                        Public:
                        <select
                                    className="project_public"
                                    onChange={[Function]}
                        >
                                    <option
                                                value="true"
                                    >
                                                Yes
                                    </option>
                                    <option
                                                value="false"
                                    >
                                                No
                                    </option>
                        </select>
            </label>
            <input
                        type="submit"
                        value="Submit"
            />
</form>,
          "className": "add-popup",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <button
                className="close-popup"
                onClick={[Function]}
>
                X
</button>,
              <h4>
                Add New Project
</h4>,
              <label
                htmlFor="project-name"
>
                Project Name:
                <input
                                className="project_name"
                                onChange={[Function]}
                                placeholder="Project Name"
                                type="text"
                />
</label>,
              <label
                htmlFor="project-location"
>
                Location:
                <input
                                className="project_location"
                                onChange={[Function]}
                                placeholder="Location"
                                type="text"
                />
</label>,
              <label
                htmlFor="project-union"
>
                Union:
                <select
                                className="project_union"
                                onChange={[Function]}
                >
                                <option
                                                value="true"
                                >
                                                Yes
                                </option>
                                <option
                                                value="false"
                                >
                                                No
                                </option>
                </select>
</label>,
              <label
                htmlFor="project-public"
>
                Public:
                <select
                                className="project_public"
                                onChange={[Function]}
                >
                                <option
                                                value="true"
                                >
                                                Yes
                                </option>
                                <option
                                                value="false"
                                >
                                                No
                                </option>
                </select>
</label>,
              <input
                type="submit"
                value="Submit"
/>,
            ],
            "className": "popup-form",
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "X",
                "className": "close-popup",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "X",
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Add New Project",
              },
              "ref": null,
              "rendered": "Add New Project",
              "type": "h4",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Project Name:",
                  <input
                    className="project_name"
                    onChange={[Function]}
                    placeholder="Project Name"
                    type="text"
/>,
                ],
                "htmlFor": "project-name",
              },
              "ref": null,
              "rendered": Array [
                "Project Name:",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "project_name",
                    "onChange": [Function],
                    "placeholder": "Project Name",
                    "type": "text",
                  },
                  "ref": "project-name",
                  "rendered": null,
                  "type": "input",
                },
              ],
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Location:",
                  <input
                    className="project_location"
                    onChange={[Function]}
                    placeholder="Location"
                    type="text"
/>,
                ],
                "htmlFor": "project-location",
              },
              "ref": null,
              "rendered": Array [
                "Location:",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "project_location",
                    "onChange": [Function],
                    "placeholder": "Location",
                    "type": "text",
                  },
                  "ref": "location-position",
                  "rendered": null,
                  "type": "input",
                },
              ],
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Union:",
                  <select
                    className="project_union"
                    onChange={[Function]}
>
                    <option
                                        value="true"
                    >
                                        Yes
                    </option>
                    <option
                                        value="false"
                    >
                                        No
                    </option>
</select>,
                ],
                "htmlFor": "project-union",
              },
              "ref": null,
              "rendered": Array [
                "Union:",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <option
                        value="true"
>
                        Yes
</option>,
                      <option
                        value="false"
>
                        No
</option>,
                    ],
                    "className": "project_union",
                    "onChange": [Function],
                  },
                  "ref": "project-union",
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Yes",
                        "value": "true",
                      },
                      "ref": null,
                      "rendered": "Yes",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "No",
                        "value": "false",
                      },
                      "ref": null,
                      "rendered": "No",
                      "type": "option",
                    },
                  ],
                  "type": "select",
                },
              ],
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Public:",
                  <select
                    className="project_public"
                    onChange={[Function]}
>
                    <option
                                        value="true"
                    >
                                        Yes
                    </option>
                    <option
                                        value="false"
                    >
                                        No
                    </option>
</select>,
                ],
                "htmlFor": "project-public",
              },
              "ref": null,
              "rendered": Array [
                "Public:",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <option
                        value="true"
>
                        Yes
</option>,
                      <option
                        value="false"
>
                        No
</option>,
                    ],
                    "className": "project_public",
                    "onChange": [Function],
                  },
                  "ref": "project-public",
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Yes",
                        "value": "true",
                      },
                      "ref": null,
                      "rendered": "Yes",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "No",
                        "value": "false",
                      },
                      "ref": null,
                      "rendered": "No",
                      "type": "option",
                    },
                  ],
                  "type": "select",
                },
              ],
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "type": "submit",
                "value": "Submit",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
          ],
          "type": "form",
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Controls
            selectControl={[Function]}
            selectedControl="Add Project"
/>,
          <DataViz
            selectedControl="Add Project"
/>,
          <div
            className="add-popup"
>
            <form
                        className="popup-form"
                        onSubmit={[Function]}
            >
                        <button
                                    className="close-popup"
                                    onClick={[Function]}
                        >
                                    X
                        </button>
                        <h4>
                                    Add New Project
                        </h4>
                        <label
                                    htmlFor="project-name"
                        >
                                    Project Name:
                                    <input
                                                className="project_name"
                                                onChange={[Function]}
                                                placeholder="Project Name"
                                                type="text"
                                    />
                        </label>
                        <label
                                    htmlFor="project-location"
                        >
                                    Location:
                                    <input
                                                className="project_location"
                                                onChange={[Function]}
                                                placeholder="Location"
                                                type="text"
                                    />
                        </label>
                        <label
                                    htmlFor="project-union"
                        >
                                    Union:
                                    <select
                                                className="project_union"
                                                onChange={[Function]}
                                    >
                                                <option
                                                            value="true"
                                                >
                                                            Yes
                                                </option>
                                                <option
                                                            value="false"
                                                >
                                                            No
                                                </option>
                                    </select>
                        </label>
                        <label
                                    htmlFor="project-public"
                        >
                                    Public:
                                    <select
                                                className="project_public"
                                                onChange={[Function]}
                                    >
                                                <option
                                                            value="true"
                                                >
                                                            Yes
                                                </option>
                                                <option
                                                            value="false"
                                                >
                                                            No
                                                </option>
                                    </select>
                        </label>
                        <input
                                    type="submit"
                                    value="Submit"
                        />
            </form>
</div>,
        ],
        "className": "main-container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "selectControl": [Function],
            "selectedControl": "Add Project",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "selectedControl": "Add Project",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <form
              className="popup-form"
              onSubmit={[Function]}
>
              <button
                            className="close-popup"
                            onClick={[Function]}
              >
                            X
              </button>
              <h4>
                            Add New Project
              </h4>
              <label
                            htmlFor="project-name"
              >
                            Project Name:
                            <input
                                          className="project_name"
                                          onChange={[Function]}
                                          placeholder="Project Name"
                                          type="text"
                            />
              </label>
              <label
                            htmlFor="project-location"
              >
                            Location:
                            <input
                                          className="project_location"
                                          onChange={[Function]}
                                          placeholder="Location"
                                          type="text"
                            />
              </label>
              <label
                            htmlFor="project-union"
              >
                            Union:
                            <select
                                          className="project_union"
                                          onChange={[Function]}
                            >
                                          <option
                                                        value="true"
                                          >
                                                        Yes
                                          </option>
                                          <option
                                                        value="false"
                                          >
                                                        No
                                          </option>
                            </select>
              </label>
              <label
                            htmlFor="project-public"
              >
                            Public:
                            <select
                                          className="project_public"
                                          onChange={[Function]}
                            >
                                          <option
                                                        value="true"
                                          >
                                                        Yes
                                          </option>
                                          <option
                                                        value="false"
                                          >
                                                        No
                                          </option>
                            </select>
              </label>
              <input
                            type="submit"
                            value="Submit"
              />
</form>,
            "className": "add-popup",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <button
                  className="close-popup"
                  onClick={[Function]}
>
                  X
</button>,
                <h4>
                  Add New Project
</h4>,
                <label
                  htmlFor="project-name"
>
                  Project Name:
                  <input
                                    className="project_name"
                                    onChange={[Function]}
                                    placeholder="Project Name"
                                    type="text"
                  />
</label>,
                <label
                  htmlFor="project-location"
>
                  Location:
                  <input
                                    className="project_location"
                                    onChange={[Function]}
                                    placeholder="Location"
                                    type="text"
                  />
</label>,
                <label
                  htmlFor="project-union"
>
                  Union:
                  <select
                                    className="project_union"
                                    onChange={[Function]}
                  >
                                    <option
                                                      value="true"
                                    >
                                                      Yes
                                    </option>
                                    <option
                                                      value="false"
                                    >
                                                      No
                                    </option>
                  </select>
</label>,
                <label
                  htmlFor="project-public"
>
                  Public:
                  <select
                                    className="project_public"
                                    onChange={[Function]}
                  >
                                    <option
                                                      value="true"
                                    >
                                                      Yes
                                    </option>
                                    <option
                                                      value="false"
                                    >
                                                      No
                                    </option>
                  </select>
</label>,
                <input
                  type="submit"
                  value="Submit"
/>,
              ],
              "className": "popup-form",
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "X",
                  "className": "close-popup",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": "X",
                "type": "button",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Add New Project",
                },
                "ref": null,
                "rendered": "Add New Project",
                "type": "h4",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "Project Name:",
                    <input
                      className="project_name"
                      onChange={[Function]}
                      placeholder="Project Name"
                      type="text"
/>,
                  ],
                  "htmlFor": "project-name",
                },
                "ref": null,
                "rendered": Array [
                  "Project Name:",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "project_name",
                      "onChange": [Function],
                      "placeholder": "Project Name",
                      "type": "text",
                    },
                    "ref": "project-name",
                    "rendered": null,
                    "type": "input",
                  },
                ],
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "Location:",
                    <input
                      className="project_location"
                      onChange={[Function]}
                      placeholder="Location"
                      type="text"
/>,
                  ],
                  "htmlFor": "project-location",
                },
                "ref": null,
                "rendered": Array [
                  "Location:",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "project_location",
                      "onChange": [Function],
                      "placeholder": "Location",
                      "type": "text",
                    },
                    "ref": "location-position",
                    "rendered": null,
                    "type": "input",
                  },
                ],
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "Union:",
                    <select
                      className="project_union"
                      onChange={[Function]}
>
                      <option
                                            value="true"
                      >
                                            Yes
                      </option>
                      <option
                                            value="false"
                      >
                                            No
                      </option>
</select>,
                  ],
                  "htmlFor": "project-union",
                },
                "ref": null,
                "rendered": Array [
                  "Union:",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <option
                          value="true"
>
                          Yes
</option>,
                        <option
                          value="false"
>
                          No
</option>,
                      ],
                      "className": "project_union",
                      "onChange": [Function],
                    },
                    "ref": "project-union",
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Yes",
                          "value": "true",
                        },
                        "ref": null,
                        "rendered": "Yes",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "No",
                          "value": "false",
                        },
                        "ref": null,
                        "rendered": "No",
                        "type": "option",
                      },
                    ],
                    "type": "select",
                  },
                ],
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "Public:",
                    <select
                      className="project_public"
                      onChange={[Function]}
>
                      <option
                                            value="true"
                      >
                                            Yes
                      </option>
                      <option
                                            value="false"
                      >
                                            No
                      </option>
</select>,
                  ],
                  "htmlFor": "project-public",
                },
                "ref": null,
                "rendered": Array [
                  "Public:",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <option
                          value="true"
>
                          Yes
</option>,
                        <option
                          value="false"
>
                          No
</option>,
                      ],
                      "className": "project_public",
                      "onChange": [Function],
                    },
                    "ref": "project-public",
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Yes",
                          "value": "true",
                        },
                        "ref": null,
                        "rendered": "Yes",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "No",
                          "value": "false",
                        },
                        "ref": null,
                        "rendered": "No",
                        "type": "option",
                      },
                    ],
                    "type": "select",
                  },
                ],
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "type": "submit",
                  "value": "Submit",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
            ],
            "type": "form",
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
